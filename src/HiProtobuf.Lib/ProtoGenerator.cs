/****************************************************************************
 * Description: 
 * 
 * Document: https://github.com/hiramtan/HiProtobuf
 * Author: hiramtan@live.com
 * Modifier: zf-ano@163.com
 ****************************************************************************/

using System.Collections.Generic;
using System.IO;
using System.Linq;
using HiFramework.Assert;
using Microsoft.Office.Interop.Excel;

namespace HiProtobuf.Lib
{
    internal class ProtoGenerator
    {
        private const string tag_ProtoBuf_Start = "ProtoBuf_Start";
        private const string tag_ProtoBuf_End = "ProtoBuf_End";
        private const string tag_ProtoBuf_VarName = "ProtoBuf_VarName";
        private const string tag_ProtoBuf_VarType = "ProtoBuf_VarType";

        private const string Header_Auth = @"
// This is auto generated by HiProtobuf
// Support: hiramtan@live.com
// Modified: zf-ano@163.com

// [START syntax declaration]
syntax = ""proto3"";
// [END syntax declaration]
";

        private const string Header_DefaultPkg = @"
// [START default package declaration]
package {0};
// [END default package declaration]
";

        private const string Header_Java_Declaration_Start = @"
// [START java_declaration]
";

        private const string Header_JavaPkg = @"
option java_package = ""{0}"";
";

        private const string Header_JavaClassName = @"
option java_outer_classname = ""{0}"";
";

        private const string Header_Java_Declaration_End = @"
// [END java_declaration]
";

        private const string Header_CsPkg = @"
// [START csharp_declaration]
option csharp_namespace = ""{0}""; 
// [END csharp_declaration]
";

        private const string MessageBody = @"
message {0} {{
{1}
}}
";

        private const string MessageDataListBody = @"
message {0}List
{{
    repeated {1} {2} = 1;
}}
";

        private const string MessageComment = @"
/// <summary>
/// {0}
/// </summary>
";

        private const string LineComment = @"// {0}";

        private readonly string _fileName;

        private readonly string _nameComment;
        private readonly string _name;

        private readonly string _pkgName;
        private readonly string _pkgForCs;
        private readonly string _pkgForJava;
        private readonly string _classNameForJava;
        private readonly Dictionary<string, string> _varType;

        private readonly int _varRowStart;
        private readonly int _varRowEnd;
        private readonly int _varNameCol;
        private readonly int _varTypeCol;

        private readonly Range _range;

        private readonly string _path;
        private int _index;

        public ProtoGenerator(string fileName, Range range)
        {
            _fileName = fileName;
            _range = range;
            _varType = new Dictionary<string, string>();

            _nameComment = ((Range) _range.Cells[1, 1]).Value2.ToString();
            _name = ((Range) _range.Cells[1, 2]).Value2.ToString();
            _pkgName = ((Range) _range.Cells[1, 3]).Value2.ToString();
            _pkgForCs = ((Range) _range.Cells[1, 4]).Value2.ToString();
            if (_pkgForCs.Equals("CS_PKG_NAME"))
            {
                _pkgForCs = null;
            }

            _pkgForJava = ((Range) _range.Cells[1, 5]).Value2.ToString();
            if (_pkgForJava.Equals("JAVA_PKG_NAME"))
            {
                _pkgForJava = null;
            }

            _classNameForJava = ((Range) _range.Cells[1, 6]).Value2.ToString();
            if (_classNameForJava.Equals("JAVA_CLASS_OUTER_NAME"))
            {
                _classNameForJava = null;
            }

            int rowCount = range.Rows.Count;
            int colCount = range.Columns.Count;
            for (int row = 2; row <= rowCount; row++)
            {
                bool finish = false;
                for (int col = 1; col <= colCount; col++)
                {
                    string cellVal = _range.Cells[row, col].Value2.ToString();
                    if (cellVal.Equals(tag_ProtoBuf_Start))
                    {
                        _varRowStart = row + 2;
                        break;
                    }

                    if (cellVal.Equals(tag_ProtoBuf_End))
                    {
                        _varRowEnd = row - 1;
                        finish = true;
                        break;
                    }

                    if (cellVal.Equals(tag_ProtoBuf_VarName))
                    {
                        _varNameCol = col;
                    }

                    if (cellVal.Equals(tag_ProtoBuf_VarType))
                    {
                        _varTypeCol = col;
                        colCount = _varTypeCol;
                        break;
                    }
                }

                if (finish)
                {
                    break;
                }
            }

            _range = range;

            _path = $"{Settings.Export_Folder}{Settings.proto_folder}/{_name}List.proto";

            _index = 0;
        }

        public void Process()
        {
            ProcessHeader();
            ProcessVariables();
            ProcessList();

            string pkgName = _pkgName;
            if (!string.IsNullOrEmpty(_pkgForCs))
            {
                pkgName = _pkgForCs;
            }

            string[] pkgnames = pkgName.Split('.');
            pkgName = "";
            for (int i = 0; i < pkgnames.Length; i++)
            {
                string s = pkgnames[i];
                pkgName += s.Substring(0, 1).ToUpper() + s.Substring(1);
                if (i < pkgnames.Length - 1)
                {
                    pkgName += ".";
                }
            }

            string listClzName = $"{_name}List";
            DataInfo.AllDataClassInfo.Add(listClzName,
                new DataInfo.Data(pkgName, listClzName, _name, _fileName, _varType));
        }

        void ProcessHeader()
        {
            string header = Header_Auth;
            header += string.Format(Header_DefaultPkg, _pkgName);
            if (!string.IsNullOrEmpty(_pkgForJava) || !string.IsNullOrEmpty(_classNameForJava))
            {
                header += Header_Java_Declaration_Start;
                if (!string.IsNullOrEmpty(_pkgForJava))
                {
                    header += string.Format(Header_JavaPkg, _pkgForJava);
                }

                if (!string.IsNullOrEmpty(_classNameForJava))
                {
                    header += string.Format(Header_JavaClassName, _classNameForJava);
                }

                header += Header_Java_Declaration_End;
            }

            if (!string.IsNullOrEmpty(_pkgForCs))
            {
                header += string.Format(Header_CsPkg, _pkgForCs);
            }

            var sw = File.AppendText(_path);
            sw.WriteLine(header);
            sw.Close();
        }

        void ProcessVariables()
        {
            var str = "";
            for (int i = _varRowStart, index = 1; i <= _varRowEnd; i++, index++)
            {
                var type = ((Range) _range.Cells[i, _varTypeCol]).Value2.ToString();
                var name = ((Range) _range.Cells[i, _varNameCol]).Value2.ToString();
                
                str += GetVariableString(type, name, index);
                if (i < _varRowEnd)
                {
                    str += "\n";
                }
                
                _varType.Add(name, type);
            }

            str = string.Format(MessageBody, _name, str);
            var sw = File.AppendText(_path);
            sw.WriteLine(str);
            sw.Close();
        }

        /// <summary>
        /// 数组用[]标识
        /// </summary>
        /// <param name="infos"></param>
        private string GetVariableString(string type, string name, int index)
        {
            AssertThat.IsTrue(Common.VariableType.Contains(type), "Type define error");

            _index++; //从1开始定义
            string str = "";
            if (type.Contains("[]")) //如果是数组进行转换
            {
                type = "repeated " + type.Split('[')[0];
            }

            str += $"\t{type} {name} = {index};";
            return str;
        }

        private void ProcessList()
        {
            string str = "";
            if (!string.IsNullOrEmpty(_nameComment))
            {
                str += string.Format(MessageComment, _nameComment);
            }

            str += string.Format(MessageDataListBody, _name, _name, "List");
            var sw = File.AppendText(_path);
            sw.WriteLine(str);
            sw.Close();
        }
    }
}